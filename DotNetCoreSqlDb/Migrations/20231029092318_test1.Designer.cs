// <auto-generated />
using System;
using DotNetCoreSqlDb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetCoreSqlDb.Migrations
{
    [DbContext(typeof(MyDatabaseContext))]
    [Migration("20231029092318_test1")]
    partial class test1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetCoreSqlDb.Models.ElectricalTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CableSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CircuitLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CircuitNameOrDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ContinuityOhms")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EarthSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FaultLoopImpedance")
                        .HasColumnType("float");

                    b.Property<double?>("InsulationResistance")
                        .HasColumnType("float");

                    b.Property<bool?>("InterconnectPass")
                        .HasColumnType("bit");

                    b.Property<string>("JobNameOrNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeutralNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfPhases")
                        .HasColumnType("int");

                    b.Property<bool?>("PolarityPass")
                        .HasColumnType("bit");

                    b.Property<string>("ProtectionSizeOrType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RcdTripTime")
                        .HasColumnType("float");

                    b.Property<bool?>("ShortCircuitPass")
                        .HasColumnType("bit");

                    b.Property<string>("TesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisualInspection")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ElectricalTestResults");
                });

            modelBuilder.Entity("DotNetCoreSqlDb.Models.Todo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Todo");
                });
#pragma warning restore 612, 618
        }
    }
}
